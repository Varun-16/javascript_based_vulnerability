require 'rubygems'
require 'stemmer'
require 'classifier'
require 'open-uri'
require 'nokogiri'
require 'pry'
require 'execjs'
require_relative 'app.rb'

def get_script site
	html = Nokogiri::HTML(open(site).read)
	scripts = []
	html.css('script').each do |script|
    if not script.content.empty?
	  #Data here
	  scripts << script.content.strip
    end
	end
	scripts
end

def check_site site
	get_script(site).each do |f|
		puts $classifier.classify f
		# puts f.class
		# if classifier.classify f.to_s == "Vulnerable"
		# 	puts "Vulnerable"
		# end
	end
end

# # Train the classifier
def train_vulnerable classifier,start,length
	i=0
	# puts "Vulnerable"
	while i < length
		# puts ($vulnerable[i]).inspect
		if start+i >= $vulnerable.length
			start = -i
		end
		# puts start+i
		classifier.train_vulnerable $vulnerable[start+i].content.to_s.scrub!
		i+=1
	end
end

def train_not_vulnerable classifier,start,length
	i=0
	# puts "Not vulnerable"
	while i < length
		if start+i >= $not_vulnerable.length
			start = -i
		end
		puts start+i
		classifier.train_not_vulnerable $not_vulnerable[start+i].content.to_s.scrub!
		puts $not_vulnerable[start+i].inspect
		i+=1
	end
end


def train classifier
	puts "Start_point = #{START_VUL_POINT}"
	if FIND_ACCURACY_FLAG
		train_vulnerable classifier,START_VUL_POINT,VUL_LENGTH
		train_not_vulnerable classifier,START_NON_VUL_POINT,NON_VUL_LENGTH
	else
		train_vulnerable classifier,0,$vulnerable.length
		train_not_vulnerable classifier,0,$not_vulnerable.length
	end
	# $not_vulnerable.each { |script| classifier.train_not_vulnerable script }
	# $vulnerable.each { |script| classifier.train_vulnerable script }
	classifier
end

def get_classified_data script

	begin
		ExecJS.eval script.content.scrub!
		if script.script_type == "Vulnerable"
			# puts script.domain.strip
			# puts script.inspect
			$vulnerable << script
		else
			# puts script.domain
			$not_vulnerable << script
		end
	rescue 
		
	end

end

def test_vul_data
	test_vul_length = $vulnerable.length - VUL_LENGTH
	start_vul = (START_VUL_POINT+VUL_LENGTH)%($vulnerable.length)
	count=0
	puts "Test vulnerable"
	while count < test_vul_length
		if start_vul >= $vulnerable.length
			start_vul=0
		end
		$final_vul << ($classifier.classify $vulnerable[start_vul].content.to_s.scrub!)
		count+=1
	end

end

def test_non_vul_data
	test_vul_length = $not_vulnerable.length - NON_VUL_LENGTH
	start_vul = (START_NON_VUL_POINT+NON_VUL_LENGTH)%($not_vulnerable.length)
	count=0
	puts "TEST Non VUlnerbale"
	while count < test_vul_length
		if start_vul >= $not_vulnerable.length
			start_vul=0
		end
		$final_non_vul << ($classifier.classify $not_vulnerable[start_vul].content.to_s.scrub!)
		count+=1
	end
end


def test_data_set
	test_vul_data
	test_non_vul_data
end


def get_data start_point,end_point
	# if end_point < start_point
	# 	Xsssite.where(:id < end_point)
	# end

	Script.all.each do |each_script|
	# puts site.status.to_s.strip
		get_classified_data each_script
		# count +=1
	end
end


FIND_ACCURACY_FLAG=true

if FIND_ACCURACY_FLAG
	VUL_LENGTH=75
	START_VUL_POINT=rand(98)
	NON_VUL_LENGTH=10
	START_NON_VUL_POINT=rand(16)

	puts "-"*25
	puts START_NON_VUL_POINT
	puts "-"*25
	puts START_VUL_POINT
	puts "-"*25

end



final_num = 0
all_data = []
$final_vul = []
$final_non_vul = []
$vulnerable = []
$not_vulnerable = []

classifier = Classifier::Bayes.new('Vulnerable', 'Not vulnerable')

get_data Script.first.id,Script.last.id

$classifier = train classifier
# puts $classifier.inspect
# test_data_set

# correct = 0
# $final_vul.each do |f|
# 	if f != "Vulnerable"
# 		correct +=1
# 	end
# end

# $final_non_vul.each do |f|
# 	if f != "Not Vulnerable"
# 		correct +=1
# 	end
# end

# effectiveness = (correct.to_i*100)/30

# puts "effectiveness = #{effectiveness}"


binding.pry


# while(final_num < 100)
# final_num += 1

# # Load previous classifications
# not_vulnerable = []
# vulnerable = []
# count = 0
# while count == 0
#   count = rand(110)
# end
# limit = (count + 100)%120
# size = (count + 19)%120

# puts "Count = #{count}, limit = #{limit}, size = #{size}"

# tmp_var = 0
# while(tmp_var < 100)
# 	tmp_var+=1
# 	site = Xsssite.find(count)
# 	if site.status.length == 9
		# puts site.domain.strip
# 		vulnerable += site.scripts
# 	else
		# puts site.domain
# 		not_vulnerable += site.scripts
# 	end
# 	count +=1
# 	if (count > 120)
# 		count = 1
# 	end
# end

# # Xsssite.all.each do |site|
	# puts site.status.to_s.strip
# # 	if count > 100
# # 		break
# # 	if site.status.length == 9
		# puts site.domain.strip
# # 		vulnerable += site.scripts
# # 	else
		# puts site.domain
# # 		not_vulnerable += site.scripts
# # 	end
# # 	count +=1
# # end
# # not_funny = YAML::load_file('not_funny.yml')



# # Create our Bayes / LSI classifier


# classifier = Classifier::Bayes.new('Vulnerable', 'Not vulnerable')

# classifier = train classifier

# # not_vulnerable.each do |script| 
# # 	# if classifier.classify script.content
	  # puts script.content 
# # 	# end
# # end

# puts "DONE!!"

# not_vulnerable = []
# vulnerable = []

# # check_site "http://www.google.com"

# correct = 0
# wrong  = 0
# # count = 1

# tmp_var1 = 0

# puts "count = #{count}"

# # if FIND_ACCURACY_FLAG
# while(tmp_var1 < 20)
# 	tmp_var1+=1
# 	flag = 0

# 	site2 = Xsssite.find(count) 
# 	site2.scripts.each do |f|
# 		out = classifier.classify f.content.to_s
# 		if out == "Vulnerable"
# 			flag -=1
# 		else
# 			flag +=1
# 		end
# 	end
# 	if flag >= 0 and site2.status.length == 7
# 		correct += 1
# 	elsif flag <= 0 and site2.status.length == 9
# 		correct += 1
# 	else
# 		wrong += 1
# 	end
# 	count += 1
# 	if (count > 120)
# 		count = 1
# 	end
# end

# puts "count = #{count}"

# accuracy = (correct/20)*100
# all_data << accuracy
# puts accuracy

# end

# sum = 0
# all_data.each do |f|
#  sum += f
# end
# puts "Average accuracy = #{sum/all_data.length}" 
# puts classifier.classify "alert(document.cookie);"